
alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if (sysCallNo == 8) then
	alias currentPID S2;
	currentPID = (PTBR - 1024)/8;
	
	alias currentPCB S3;
	currentPCB = READY_LIST + 32*currentPID;

	alias newPID S4;
	newPID=0;
	while (newPID < 32) do
		if ([READY_LIST + 32*newPID + 1] == 0) then
			break;
		endif;
		newPID=newPID+1;
	endwhile;

	if (newPID == 32) then
		[physicalSP - 2]=-1;
		ireturn;
	endif;

	
	[READY_LIST+32*newPID]=newPID;

	alias free_page S5;
	free_page=0;
	while (free_page < 64) do
		if ([MEM_LIST + free_page] == 0) then
			[MEM_LIST + free_page]=1;
			break;
		endif;
		free_page=free_page+1;
	endwhile;
	alias pageIndex S12;
	pageIndex=0;
	if (free_page == 64) then
		while(1) do
			if (pageIndex >= 256) then
				pageIndex=pageIndex-256;
			endif;

			if (pageIndex  == PTBR-PAGE_TABLE + 6) then
				pageIndex=pageIndex+2;
	
				continue;
			endif;

			if ([PAGE_TABLE + pageIndex + 1] == "01") then
				if ([MEM_LIST + [PAGE_TABLE + pageIndex]] > 1) then
					pageIndex=pageIndex+2;
					continue;
				endif;
				alias blockno S13;
				blockno=448;
				while(blockno < 512) do
					if ([DISK_LIST + blockno] == 0) then
						break;
					endif;
					blockno=blockno+1;
				endwhile;

				if (blockno == 512) then
					SP=SP+2;
					[physicalSP + 1]=10;
					inline "JMP 11776";
				endif;

				store([PAGE_TABLE + pageIndex],blockno);
				[DISK_LIST + blockno]=1;
				store(6,20);

				free_page=[PAGE_TABLE + pageIndex];
				[PAGE_TABLE + pageIndex]=blockno;
				[PAGE_TABLE + pageIndex + 1]="00";
				break;
			endif;

			if ([PAGE_TABLE + pageIndex + 1] == "11") then
				[PAGE_TABLE + pageIndex + 1]="01";
			endif;

			pageIndex=pageIndex+2;
		endwhile;
	endif;


	alias newPTBR S7;
	newPTBR=PAGE_TABLE + 8*newPID;

	alias counter S8;
		counter=0;
	pageIndex=PTLR-1;
	while (counter < 512) do
		[512*free_page + counter]=[512*[PTBR + 2*pageIndex] + counter];
		counter=counter+1;
	endwhile;

	[newPTBR + 2*pageIndex]=free_page;
	[newPTBR + 2*pageIndex + 1]="01";

	alias blockno S10;
	pageIndex=0;
	while(pageIndex < (PTLR - 1)) do
		blockno=[PTBR + 2*pageIndex];
		[newPTBR + 2*pageIndex]=[PTBR + 2*pageIndex];
		[newPTBR + 2*pageIndex + 1]=[PTBR + 2*pageIndex + 1];
		if (([PTBR + 2*pageIndex + 1] == "01") || ([PTBR + 2*pageIndex + 1] == "11")) then
			[MEM_LIST + blockno]=[MEM_LIST + blockno]+1;
		else
			if (blockno >= 448) then
				[DISK_LIST + blockno]=[DISK_LIST + blockno]+1;
				store(6,20);
			endif;
		endif;
		pageIndex=pageIndex+1;
	endwhile;

	[READY_LIST+32*newPID + 2]=BP;
	[READY_LIST+32*newPID + 3]=SP-1;
	[READY_LIST+32*newPID + 4]=[physicalSP];
	[READY_LIST+32*newPID + 5]=newPTBR;
	[READY_LIST+32*newPID + 6]=PTLR;
	[READY_LIST+32*newPID + 7]=R0;
	[READY_LIST+32*newPID + 8]=R1;
	[READY_LIST+32*newPID + 9]=R2;
	[READY_LIST+32*newPID + 10]=R3;
	[READY_LIST+32*newPID + 11]=R4;
	[READY_LIST+32*newPID + 12]=R5;
	[READY_LIST+32*newPID + 13]=R6;
	[READY_LIST+32*newPID + 14]=R7;

	alias FileIndex S11;
	counter=0;
	while(counter < 8) do
		[READY_LIST+32*newPID + 2*counter + 15]=[currentPCB + 2*counter + 15];
		[READY_LIST+32*newPID + 2*counter + 16]=[currentPCB + 2*counter + 16];
		FileIndex=[READY_LIST+32*newPID + 2*counter + 15];

		if (FileIndex != -1) then
			[FILE_TABLE + 2*FileIndex + 1]=[FILE_TABLE + 2*FileIndex + 1]+1;
		endif;
		counter=counter+1;
	endwhile;

	[READY_LIST+32*newPID + 1]=1;
	[READY_LIST+32*newPID + 31]=currentPID;
	[physicalSP - 2]=newPID;

	alias newPhysicalSP S14;
	newPhysicalSP=([newPTBR + 2*((SP-1)/512)]*512) + ((SP-1)%512);
	[newPhysicalSP - 1]=-2;
endif;

ireturn;
