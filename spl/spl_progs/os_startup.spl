load(7,1);
load(8,2);
load(9,3);
load(10,4);
load(11,5);
load(12,6);
load(13,7);
load(14,8);
load(15,9);
load(16,10);
load(17,11);
load(18,12);
load(19,13);
load(20,14);
load(21,15);
load(22,16);
load(23,17);
load(24,18);
load(5,19);
load(6,20);
alias counter S0;			

counter = 0;
while ( counter <  128) do
	[FILE_TABLE + counter + 0] = -1;
	[FILE_TABLE + counter + 1] =  0;
	counter=counter+2;
endwhile;
	
counter =0;
while (counter < 26) do
	[MEM_LIST +counter] = 1;
	counter=counter+1;
endwhile;

counter = 26;
while (counter < 64) do
	[MEM_LIST +counter] = 0;
	counter=counter+1;
endwhile;

counter =0;
while (counter < 32) do
	[READY_LIST + 32*counter +1] =0;
	counter=counter+1;
endwhile;	

[READY_LIST + 0] = 0; // Sets the entry for PID as 0 


PTBR = 1024;
PTLR = 4;

[PTBR + 0] = 21; // Physical Page Number for Logical Page 0
[PTBR + 1] = "00"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 22; // Physical Page Number for Logical Page 1
[PTBR + 3] = "00"; // Auxiliary Information for Logical Page 1
[PTBR + 4] = 23; // Physical Page Number for Logical Page 2
[PTBR + 5] = "00"; // Auxiliary Information for Logical Page 2
[PTBR + 6] = 25; // Physical Page Number for Logical Page 3
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3

counter=15;
while (counter < 31) do
	[READY_LIST + 32*counter] = -1;
	counter=counter+1;
endwhile;

[READY_LIST + 31]=0;

counter =448;
while(counter < 512) do
	[DISK_LIST + counter]=0;
	counter = counter +1;
endwhile;
store(6,20);
[READY_LIST + 1] = 2; // Sets the entry for STATE as Running 
SP = 3*512;
[28*512] = 0; // Set up the IP value for INIT in the stack

ireturn;
